/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {

        if(head==nullptr) return nullptr;

        ListNode *slow=head,*fast=head;

        do{
            slow=slow->next;
            if(fast->next==nullptr) return nullptr;
            fast=fast->next->next;

            if(slow==fast)break;
        }while(slow!=nullptr && fast!=nullptr);

        if(slow==fast && slow!=nullptr && fast!=nullptr)
        {
            slow=head;
            while(slow!=fast)
            {
              fast=fast->next;
            slow=slow->next;
            }
            
            if(slow==fast) return slow;


        }

        
            return nullptr;


        
    }
};